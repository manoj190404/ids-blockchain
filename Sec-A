<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Scheduler and Conflict Detector</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
        }
        .container {
            width: 80%;
            margin: auto;
            text-align: center;
        }
        h1, h2 {
            margin-bottom: 20px;
        }
        .add-event-form input, .add-event-form textarea {
            margin: 10px;
            padding: 10px;
            font-size: 14px;
            width: 250px;
        }
        textarea {
            width: 250px;
            height: 100px;
        }
        button {
            padding: 10px 20px;
            font-size: 14px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }
        button:hover {
            background-color: #45a049;
        }
        .schedule {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin-bottom: 30px;
        }
        .event {
            background-color: #4CAF50;
            color: white;
            padding: 15px;
            border-radius: 5px;
            cursor: pointer;
            user-select: none;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .conflicts, .suggestions {
            margin-top: 20px;
        }
        .conflict-item {
            background-color: #f44336;
            color: white;
            padding: 10px;
            margin-bottom: 10px;
        }
        .suggestion-item {
            background-color: #ff9800;
            color: white;
            padding: 10px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Event Scheduler</h1>
        <div class="add-event-form">
            <h2>Add New Event</h2>
            <form id="event-form">
                <input type="text" id="event-name" placeholder="Event Name" required>
                <input type="time" id="start-time" required>
                <input type="time" id="end-time" required>
                <textarea id="event-description" placeholder="Event Description" required></textarea>
                <button type="submit">Add Event</button>
            </form>
        </div>
        <div class="schedule" id="schedule"></div>
        <div id="conflicts" class="conflicts"><h2>Conflicts</h2></div>
        <div id="suggestions" class="suggestions"><h2>Suggested Resolutions</h2></div>
    </div>
    <script>
        const events = [];

        function timeToMinutes(time) {
            const [hours, minutes] = time.split(":" ).map(Number);
            return hours * 60 + minutes;
        }

        function isConflict(event1, event2) {
            return !(timeToMinutes(event1.end) <= timeToMinutes(event2.start) || 
                     timeToMinutes(event2.end) <= timeToMinutes(event1.start));
        }

        function detectConflicts() {
            const conflicts = [];
            for (let i = 0; i < events.length; i++) {
                for (let j = i + 1; j < events.length; j++) {
                    if (isConflict(events[i], events[j])) {
                        conflicts.push([events[i].name, events[j].name]);
                    }
                }
            }
            return conflicts;
        }

        function suggestResolution(event) {
            const lastEvent = events[events.length - 1];
            const newStart = timeToMinutes(lastEvent.end) + 30;
            const newEnd = newStart + (timeToMinutes(event.end) - timeToMinutes(event.start));
            return {
                name: event.name,
                newStartTime: `${String(Math.floor(newStart / 60)).padStart(2, "0")}:${String(newStart % 60).padStart(2, "0")}`,
                newEndTime: `${String(Math.floor(newEnd / 60)).padStart(2, "0")}:${String(newEnd % 60).padStart(2, "0")}`
            };
        }

        function displaySchedule() {
            document.getElementById('schedule').innerHTML = events.map(event => 
                `<div class="event">${event.name}<br>From: ${event.start} To: ${event.end}<br>${event.description}</div>`
            ).join('');
        }

        function displayConflicts() {
            document.getElementById('conflicts').innerHTML = "<h2>Conflicts</h2>" + 
                detectConflicts().map(([event1, event2]) => 
                    `<div class="conflict-item">Conflict detected: ${event1} and ${event2}</div>`
                ).join('');
        }

        function displaySuggestedResolutions() {
            document.getElementById('suggestions').innerHTML = "<h2>Suggested Resolutions</h2>" + 
                events.filter(event => detectConflicts().some(conflict => conflict.includes(event.name)))
                .map(event => suggestResolution(event))
                .map(resolution => 
                    `<div class="suggestion-item">Suggested new time for ${resolution.name}: ${resolution.newStartTime} to ${resolution.newEndTime}</div>`
                ).join('');
        }

        document.getElementById('event-form').addEventListener('submit', (event) => {
            event.preventDefault();
            const name = document.getElementById('event-name').value;
            const start = document.getElementById('start-time').value;
            const end = document.getElementById('end-time').value;
            const description = document.getElementById('event-description').value;

            if (name && start && end && description) {
                events.push({ name, start, end, description });
                displaySchedule();
                displayConflicts();
                displaySuggestedResolutions();
            }
            event.target.reset();
        });
    </script>
</body>
</html>
